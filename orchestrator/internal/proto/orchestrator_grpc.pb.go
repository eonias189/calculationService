// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/orchestrator.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrchestratorClient is the client API for Orchestrator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrchestratorClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (Orchestrator_ConnectClient, error)
}

type orchestratorClient struct {
	cc grpc.ClientConnInterface
}

func NewOrchestratorClient(cc grpc.ClientConnInterface) OrchestratorClient {
	return &orchestratorClient{cc}
}

func (c *orchestratorClient) Connect(ctx context.Context, opts ...grpc.CallOption) (Orchestrator_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &Orchestrator_ServiceDesc.Streams[0], "/github.com.eonias189.calculationService.proto.Orchestrator/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &orchestratorConnectClient{stream}
	return x, nil
}

type Orchestrator_ConnectClient interface {
	Send(*ResultResp) error
	Recv() (*Task, error)
	grpc.ClientStream
}

type orchestratorConnectClient struct {
	grpc.ClientStream
}

func (x *orchestratorConnectClient) Send(m *ResultResp) error {
	return x.ClientStream.SendMsg(m)
}

func (x *orchestratorConnectClient) Recv() (*Task, error) {
	m := new(Task)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrchestratorServer is the server API for Orchestrator service.
// All implementations must embed UnimplementedOrchestratorServer
// for forward compatibility
type OrchestratorServer interface {
	Connect(Orchestrator_ConnectServer) error
	mustEmbedUnimplementedOrchestratorServer()
}

// UnimplementedOrchestratorServer must be embedded to have forward compatible implementations.
type UnimplementedOrchestratorServer struct {
}

func (UnimplementedOrchestratorServer) Connect(Orchestrator_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedOrchestratorServer) mustEmbedUnimplementedOrchestratorServer() {}

// UnsafeOrchestratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrchestratorServer will
// result in compilation errors.
type UnsafeOrchestratorServer interface {
	mustEmbedUnimplementedOrchestratorServer()
}

func RegisterOrchestratorServer(s grpc.ServiceRegistrar, srv OrchestratorServer) {
	s.RegisterService(&Orchestrator_ServiceDesc, srv)
}

func _Orchestrator_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OrchestratorServer).Connect(&orchestratorConnectServer{stream})
}

type Orchestrator_ConnectServer interface {
	Send(*Task) error
	Recv() (*ResultResp, error)
	grpc.ServerStream
}

type orchestratorConnectServer struct {
	grpc.ServerStream
}

func (x *orchestratorConnectServer) Send(m *Task) error {
	return x.ServerStream.SendMsg(m)
}

func (x *orchestratorConnectServer) Recv() (*ResultResp, error) {
	m := new(ResultResp)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Orchestrator_ServiceDesc is the grpc.ServiceDesc for Orchestrator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Orchestrator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.eonias189.calculationService.proto.Orchestrator",
	HandlerType: (*OrchestratorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Orchestrator_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/orchestrator.proto",
}
