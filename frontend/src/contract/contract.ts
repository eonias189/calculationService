/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.2
 * source: .proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace contract {
    export enum TaskStatus {
        pending = 0,
        execution = 1,
        done = 2,
        executionError = 3
    }
    export class Timeouts extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            add?: number;
            substract?: number;
            multiply?: number;
            divide?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("add" in data && data.add != undefined) {
                    this.add = data.add;
                }
                if ("substract" in data && data.substract != undefined) {
                    this.substract = data.substract;
                }
                if ("multiply" in data && data.multiply != undefined) {
                    this.multiply = data.multiply;
                }
                if ("divide" in data && data.divide != undefined) {
                    this.divide = data.divide;
                }
            }
        }
        get add() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set add(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get substract() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set substract(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get multiply() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set multiply(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get divide() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set divide(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            add?: number;
            substract?: number;
            multiply?: number;
            divide?: number;
        }): Timeouts {
            const message = new Timeouts({});
            if (data.add != null) {
                message.add = data.add;
            }
            if (data.substract != null) {
                message.substract = data.substract;
            }
            if (data.multiply != null) {
                message.multiply = data.multiply;
            }
            if (data.divide != null) {
                message.divide = data.divide;
            }
            return message;
        }
        toObject() {
            const data: {
                add?: number;
                substract?: number;
                multiply?: number;
                divide?: number;
            } = {};
            if (this.add != null) {
                data.add = this.add;
            }
            if (this.substract != null) {
                data.substract = this.substract;
            }
            if (this.multiply != null) {
                data.multiply = this.multiply;
            }
            if (this.divide != null) {
                data.divide = this.divide;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.add != 0)
                writer.writeInt64(1, this.add);
            if (this.substract != 0)
                writer.writeInt64(2, this.substract);
            if (this.multiply != 0)
                writer.writeInt64(3, this.multiply);
            if (this.divide != 0)
                writer.writeInt64(4, this.divide);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Timeouts {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Timeouts();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.add = reader.readInt64();
                        break;
                    case 2:
                        message.substract = reader.readInt64();
                        break;
                    case 3:
                        message.multiply = reader.readInt64();
                        break;
                    case 4:
                        message.divide = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Timeouts {
            return Timeouts.deserialize(bytes);
        }
    }
    export class Task extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            expression?: string;
            result?: number;
            agentId?: number;
            status?: TaskStatus;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("expression" in data && data.expression != undefined) {
                    this.expression = data.expression;
                }
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
                if ("agentId" in data && data.agentId != undefined) {
                    this.agentId = data.agentId;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get expression() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set expression(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set result(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get agentId() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set agentId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 5, TaskStatus.pending) as TaskStatus;
        }
        set status(value: TaskStatus) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            id?: string;
            expression?: string;
            result?: number;
            agentId?: number;
            status?: TaskStatus;
        }): Task {
            const message = new Task({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.expression != null) {
                message.expression = data.expression;
            }
            if (data.result != null) {
                message.result = data.result;
            }
            if (data.agentId != null) {
                message.agentId = data.agentId;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                expression?: string;
                result?: number;
                agentId?: number;
                status?: TaskStatus;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.expression != null) {
                data.expression = this.expression;
            }
            if (this.result != null) {
                data.result = this.result;
            }
            if (this.agentId != null) {
                data.agentId = this.agentId;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.expression.length)
                writer.writeString(2, this.expression);
            if (this.result != 0)
                writer.writeInt64(3, this.result);
            if (this.agentId != 0)
                writer.writeInt64(4, this.agentId);
            if (this.status != TaskStatus.pending)
                writer.writeEnum(5, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Task {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Task();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.expression = reader.readString();
                        break;
                    case 3:
                        message.result = reader.readInt64();
                        break;
                    case 4:
                        message.agentId = reader.readInt64();
                        break;
                    case 5:
                        message.status = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Task {
            return Task.deserialize(bytes);
        }
    }
    export class GetTaskResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            task?: Task;
            timeouts?: Timeouts;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("task" in data && data.task != undefined) {
                    this.task = data.task;
                }
                if ("timeouts" in data && data.timeouts != undefined) {
                    this.timeouts = data.timeouts;
                }
            }
        }
        get task() {
            return pb_1.Message.getWrapperField(this, Task, 1) as Task;
        }
        set task(value: Task) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_task() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get timeouts() {
            return pb_1.Message.getWrapperField(this, Timeouts, 2) as Timeouts;
        }
        set timeouts(value: Timeouts) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_timeouts() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            task?: ReturnType<typeof Task.prototype.toObject>;
            timeouts?: ReturnType<typeof Timeouts.prototype.toObject>;
        }): GetTaskResp {
            const message = new GetTaskResp({});
            if (data.task != null) {
                message.task = Task.fromObject(data.task);
            }
            if (data.timeouts != null) {
                message.timeouts = Timeouts.fromObject(data.timeouts);
            }
            return message;
        }
        toObject() {
            const data: {
                task?: ReturnType<typeof Task.prototype.toObject>;
                timeouts?: ReturnType<typeof Timeouts.prototype.toObject>;
            } = {};
            if (this.task != null) {
                data.task = this.task.toObject();
            }
            if (this.timeouts != null) {
                data.timeouts = this.timeouts.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_task)
                writer.writeMessage(1, this.task, () => this.task.serialize(writer));
            if (this.has_timeouts)
                writer.writeMessage(2, this.timeouts, () => this.timeouts.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTaskResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTaskResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.task, () => message.task = Task.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.timeouts, () => message.timeouts = Timeouts.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTaskResp {
            return GetTaskResp.deserialize(bytes);
        }
    }
    export class GetTasksResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tasks?: Task[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tasks" in data && data.tasks != undefined) {
                    this.tasks = data.tasks;
                }
            }
        }
        get tasks() {
            return pb_1.Message.getRepeatedWrapperField(this, Task, 1) as Task[];
        }
        set tasks(value: Task[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            tasks?: ReturnType<typeof Task.prototype.toObject>[];
        }): GetTasksResp {
            const message = new GetTasksResp({});
            if (data.tasks != null) {
                message.tasks = data.tasks.map(item => Task.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                tasks?: ReturnType<typeof Task.prototype.toObject>[];
            } = {};
            if (this.tasks != null) {
                data.tasks = this.tasks.map((item: Task) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tasks.length)
                writer.writeRepeatedMessage(1, this.tasks, (item: Task) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTasksResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTasksResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.tasks, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Task.deserialize(reader), Task));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTasksResp {
            return GetTasksResp.deserialize(bytes);
        }
    }
    export class GetTimeoutsResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            timeouts?: Timeouts;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("timeouts" in data && data.timeouts != undefined) {
                    this.timeouts = data.timeouts;
                }
            }
        }
        get timeouts() {
            return pb_1.Message.getWrapperField(this, Timeouts, 1) as Timeouts;
        }
        set timeouts(value: Timeouts) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_timeouts() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            timeouts?: ReturnType<typeof Timeouts.prototype.toObject>;
        }): GetTimeoutsResp {
            const message = new GetTimeoutsResp({});
            if (data.timeouts != null) {
                message.timeouts = Timeouts.fromObject(data.timeouts);
            }
            return message;
        }
        toObject() {
            const data: {
                timeouts?: ReturnType<typeof Timeouts.prototype.toObject>;
            } = {};
            if (this.timeouts != null) {
                data.timeouts = this.timeouts.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_timeouts)
                writer.writeMessage(1, this.timeouts, () => this.timeouts.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTimeoutsResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTimeoutsResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.timeouts, () => message.timeouts = Timeouts.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTimeoutsResp {
            return GetTimeoutsResp.deserialize(bytes);
        }
    }
    export class SetTimeoutsBody extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            timeouts?: Timeouts;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("timeouts" in data && data.timeouts != undefined) {
                    this.timeouts = data.timeouts;
                }
            }
        }
        get timeouts() {
            return pb_1.Message.getWrapperField(this, Timeouts, 1) as Timeouts;
        }
        set timeouts(value: Timeouts) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_timeouts() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            timeouts?: ReturnType<typeof Timeouts.prototype.toObject>;
        }): SetTimeoutsBody {
            const message = new SetTimeoutsBody({});
            if (data.timeouts != null) {
                message.timeouts = Timeouts.fromObject(data.timeouts);
            }
            return message;
        }
        toObject() {
            const data: {
                timeouts?: ReturnType<typeof Timeouts.prototype.toObject>;
            } = {};
            if (this.timeouts != null) {
                data.timeouts = this.timeouts.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_timeouts)
                writer.writeMessage(1, this.timeouts, () => this.timeouts.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetTimeoutsBody {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetTimeoutsBody();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.timeouts, () => message.timeouts = Timeouts.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetTimeoutsBody {
            return SetTimeoutsBody.deserialize(bytes);
        }
    }
    export class SetTimeoutsResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ok?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ok" in data && data.ok != undefined) {
                    this.ok = data.ok;
                }
            }
        }
        get ok() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set ok(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ok?: boolean;
        }): SetTimeoutsResp {
            const message = new SetTimeoutsResp({});
            if (data.ok != null) {
                message.ok = data.ok;
            }
            return message;
        }
        toObject() {
            const data: {
                ok?: boolean;
            } = {};
            if (this.ok != null) {
                data.ok = this.ok;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ok != false)
                writer.writeBool(1, this.ok);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetTimeoutsResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetTimeoutsResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ok = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetTimeoutsResp {
            return SetTimeoutsResp.deserialize(bytes);
        }
    }
    export class AddTaskBody extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            expression?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("expression" in data && data.expression != undefined) {
                    this.expression = data.expression;
                }
            }
        }
        get expression() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set expression(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            expression?: string;
        }): AddTaskBody {
            const message = new AddTaskBody({});
            if (data.expression != null) {
                message.expression = data.expression;
            }
            return message;
        }
        toObject() {
            const data: {
                expression?: string;
            } = {};
            if (this.expression != null) {
                data.expression = this.expression;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.expression.length)
                writer.writeString(1, this.expression);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddTaskBody {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddTaskBody();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.expression = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddTaskBody {
            return AddTaskBody.deserialize(bytes);
        }
    }
    export class AddTaskResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ok?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ok" in data && data.ok != undefined) {
                    this.ok = data.ok;
                }
            }
        }
        get ok() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set ok(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ok?: boolean;
        }): AddTaskResp {
            const message = new AddTaskResp({});
            if (data.ok != null) {
                message.ok = data.ok;
            }
            return message;
        }
        toObject() {
            const data: {
                ok?: boolean;
            } = {};
            if (this.ok != null) {
                data.ok = this.ok;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ok != false)
                writer.writeBool(1, this.ok);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddTaskResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddTaskResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ok = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddTaskResp {
            return AddTaskResp.deserialize(bytes);
        }
    }
    export class SetResultBody extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            result?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set result(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: string;
            result?: number;
        }): SetResultBody {
            const message = new SetResultBody({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.result != null) {
                message.result = data.result;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                result?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.result != null) {
                data.result = this.result;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.result != 0)
                writer.writeInt64(2, this.result);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetResultBody {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetResultBody();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.result = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetResultBody {
            return SetResultBody.deserialize(bytes);
        }
    }
    export class SetResultResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ok?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ok" in data && data.ok != undefined) {
                    this.ok = data.ok;
                }
            }
        }
        get ok() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set ok(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ok?: boolean;
        }): SetResultResp {
            const message = new SetResultResp({});
            if (data.ok != null) {
                message.ok = data.ok;
            }
            return message;
        }
        toObject() {
            const data: {
                ok?: boolean;
            } = {};
            if (this.ok != null) {
                data.ok = this.ok;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ok != false)
                writer.writeBool(1, this.ok);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetResultResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetResultResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ok = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetResultResp {
            return SetResultResp.deserialize(bytes);
        }
    }
    export class RegisterBody extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            url?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
            }
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            url?: string;
        }): RegisterBody {
            const message = new RegisterBody({});
            if (data.url != null) {
                message.url = data.url;
            }
            return message;
        }
        toObject() {
            const data: {
                url?: string;
            } = {};
            if (this.url != null) {
                data.url = this.url;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.url.length)
                writer.writeString(1, this.url);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterBody {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegisterBody();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.url = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegisterBody {
            return RegisterBody.deserialize(bytes);
        }
    }
    export class RegisterResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ok?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ok" in data && data.ok != undefined) {
                    this.ok = data.ok;
                }
            }
        }
        get ok() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set ok(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ok?: boolean;
        }): RegisterResp {
            const message = new RegisterResp({});
            if (data.ok != null) {
                message.ok = data.ok;
            }
            return message;
        }
        toObject() {
            const data: {
                ok?: boolean;
            } = {};
            if (this.ok != null) {
                data.ok = this.ok;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ok != false)
                writer.writeBool(1, this.ok);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegisterResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ok = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegisterResp {
            return RegisterResp.deserialize(bytes);
        }
    }
    export class AgentStatus extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            maxThreads?: number;
            executingThreads?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("maxThreads" in data && data.maxThreads != undefined) {
                    this.maxThreads = data.maxThreads;
                }
                if ("executingThreads" in data && data.executingThreads != undefined) {
                    this.executingThreads = data.executingThreads;
                }
            }
        }
        get maxThreads() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set maxThreads(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get executingThreads() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set executingThreads(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            maxThreads?: number;
            executingThreads?: number;
        }): AgentStatus {
            const message = new AgentStatus({});
            if (data.maxThreads != null) {
                message.maxThreads = data.maxThreads;
            }
            if (data.executingThreads != null) {
                message.executingThreads = data.executingThreads;
            }
            return message;
        }
        toObject() {
            const data: {
                maxThreads?: number;
                executingThreads?: number;
            } = {};
            if (this.maxThreads != null) {
                data.maxThreads = this.maxThreads;
            }
            if (this.executingThreads != null) {
                data.executingThreads = this.executingThreads;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.maxThreads != 0)
                writer.writeInt64(1, this.maxThreads);
            if (this.executingThreads != 0)
                writer.writeInt64(2, this.executingThreads);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AgentStatus {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AgentStatus();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.maxThreads = reader.readInt64();
                        break;
                    case 2:
                        message.executingThreads = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AgentStatus {
            return AgentStatus.deserialize(bytes);
        }
    }
    export class GetAgentStatusResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: AgentStatus;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get status() {
            return pb_1.Message.getWrapperField(this, AgentStatus, 1) as AgentStatus;
        }
        set status(value: AgentStatus) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_status() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            status?: ReturnType<typeof AgentStatus.prototype.toObject>;
        }): GetAgentStatusResp {
            const message = new GetAgentStatusResp({});
            if (data.status != null) {
                message.status = AgentStatus.fromObject(data.status);
            }
            return message;
        }
        toObject() {
            const data: {
                status?: ReturnType<typeof AgentStatus.prototype.toObject>;
            } = {};
            if (this.status != null) {
                data.status = this.status.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_status)
                writer.writeMessage(1, this.status, () => this.status.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAgentStatusResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAgentStatusResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.status, () => message.status = AgentStatus.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAgentStatusResp {
            return GetAgentStatusResp.deserialize(bytes);
        }
    }
    export class AgentData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            url?: string;
            ping?: number;
            status?: AgentStatus;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
                if ("ping" in data && data.ping != undefined) {
                    this.ping = data.ping;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get ping() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set ping(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get status() {
            return pb_1.Message.getWrapperField(this, AgentStatus, 4) as AgentStatus;
        }
        set status(value: AgentStatus) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_status() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            id?: number;
            url?: string;
            ping?: number;
            status?: ReturnType<typeof AgentStatus.prototype.toObject>;
        }): AgentData {
            const message = new AgentData({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.url != null) {
                message.url = data.url;
            }
            if (data.ping != null) {
                message.ping = data.ping;
            }
            if (data.status != null) {
                message.status = AgentStatus.fromObject(data.status);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                url?: string;
                ping?: number;
                status?: ReturnType<typeof AgentStatus.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.url != null) {
                data.url = this.url;
            }
            if (this.ping != null) {
                data.ping = this.ping;
            }
            if (this.status != null) {
                data.status = this.status.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt64(1, this.id);
            if (this.url.length)
                writer.writeString(2, this.url);
            if (this.ping != 0)
                writer.writeInt64(3, this.ping);
            if (this.has_status)
                writer.writeMessage(4, this.status, () => this.status.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AgentData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AgentData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64();
                        break;
                    case 2:
                        message.url = reader.readString();
                        break;
                    case 3:
                        message.ping = reader.readInt64();
                        break;
                    case 4:
                        reader.readMessage(message.status, () => message.status = AgentStatus.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AgentData {
            return AgentData.deserialize(bytes);
        }
    }
    export class GetAgentsResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            agents?: AgentData[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("agents" in data && data.agents != undefined) {
                    this.agents = data.agents;
                }
            }
        }
        get agents() {
            return pb_1.Message.getRepeatedWrapperField(this, AgentData, 1) as AgentData[];
        }
        set agents(value: AgentData[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            agents?: ReturnType<typeof AgentData.prototype.toObject>[];
        }): GetAgentsResp {
            const message = new GetAgentsResp({});
            if (data.agents != null) {
                message.agents = data.agents.map(item => AgentData.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                agents?: ReturnType<typeof AgentData.prototype.toObject>[];
            } = {};
            if (this.agents != null) {
                data.agents = this.agents.map((item: AgentData) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.agents.length)
                writer.writeRepeatedMessage(1, this.agents, (item: AgentData) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAgentsResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAgentsResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.agents, () => pb_1.Message.addToRepeatedWrapperField(message, 1, AgentData.deserialize(reader), AgentData));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAgentsResp {
            return GetAgentsResp.deserialize(bytes);
        }
    }
}
